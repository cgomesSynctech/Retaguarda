unit Rpt_SalesOrdersItens;

interface                   

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  RPT_PADRAO, FormsComponent, dxPSCore, dxPSdxTLLnk, dxPSdxDBCtrlLnk,
  dxPSdxDBGrLnk, DBClient, Provider, Db, IBCustomDataSet, IBQuery,
  TS_LastDataObject, DlgMsg, teCtrls, TS_EffectsPanel,
  dxCntner, dxTL, dxDBCtrl, dxDBGrid, TS_QDBGrid, ExtCtrls, Buttons,
  TS_SpeedButton, StdCtrls, TS_Label, dxfLabel, TS_MaxPanel, dxDBTLCl,
  dxGrClms, dxExEdtr, dxEdLib, TS_DateTimePicker, dxEditor, TS_PopupEdit,
  CheckLst, TS_CheckListBox, Menus, TS_PopupMenu, ComCtrls, dxPSGlbl,
  dxPSUtl, dxPSEngn, dxPrnPg, dxBkgnd, dxWrap, dxPrnDev, BTOdeum, Placemnt,
  dxDBEdtr, dxDBELib, TS_LookupComboBox, Variants, TS_CheckBox,
  TS_PopupFiltrarItens;

type
  TRptSalesOrdersItens = class(TRptPadrao)
    TS_Label1: TTS_Label;
    TS_Label2: TTS_Label;
    btClientes: TTS_SpeedButton;
    edDataI: TTS_DateTimePicker;
    edDataF: TTS_DateTimePicker;
    TS_Label3: TTS_Label;
    Q_Status: TIBQuery;
    P_Status: TDataSetProvider;
    C_Status: TClientDataSet;
    C_StatusDS: TDataSource;
    C_StatusSTATUS: TStringField;
    C_StatusDESCRICAO: TStringField;
    C_StatusORDEM: TIntegerField;
    C_StatusDESCRICAO1: TStringField;
    C_StatusDESCRICAO2: TStringField;
    C_StatusDESCRICAO3: TStringField;
    C_ConsultaSAIDA: TIntegerField;
    C_ConsultaNUMERO: TStringField;
    C_ConsultaDATA: TDateField;
    C_ConsultaCLIENTE: TIntegerField;
    C_ConsultaNOME: TStringField;
    C_ConsultaVENDEDOR: TIntegerField;
    C_ConsultaNOMEVENDEDOR: TStringField;
    C_ConsultaTOTALITENS: TFloatField;
    C_ConsultaDESCONTO: TFloatField;
    C_ConsultaFRETE: TFloatField;
    C_ConsultaOUTRASDESPESAS: TFloatField;
    C_ConsultaJUROS: TFloatField;
    C_ConsultaIMPOSTO: TFloatField;
    C_ConsultaTOTAL: TFloatField;
    C_ConsultaBASEIMPOSTO: TFloatField;
    C_ConsultaSTATUSDESC: TStringField;
    C_ConsultaDESCRICAO: TStringField;
    C_ConsultaSTATUS: TStringField;
    C_ConsultaSUBTOTALITEM: TFloatField;
    C_ConsultaSAIDAITEM: TIntegerField;
    C_ConsultaITEM: TIntegerField;
    C_ConsultaQUANTIDADE: TFloatField;
    C_ConsultaQTDFATURADA: TFloatField;
    C_ConsultaINVOICE: TStringField;
    C_ConsultaSAIDAINVOICE: TIntegerField;
    C_ConsultaDESCITEM: TStringField;
    dbgConsultaSAIDA: TdxDBGridMaskColumn;
    dbgConsultaNUMERO: TdxDBGridMaskColumn;
    dbgConsultaDATA: TdxDBGridDateColumn;
    dbgConsultaCLIENTE: TdxDBGridMaskColumn;
    dbgConsultaNOME: TdxDBGridMaskColumn;
    dbgConsultaVENDEDOR: TdxDBGridMaskColumn;
    dbgConsultaNOMEVENDEDOR: TdxDBGridMaskColumn;
    dbgConsultaTOTALITENS: TdxDBGridCurrencyColumn;
    dbgConsultaDESCONTO: TdxDBGridCurrencyColumn;
    dbgConsultaFRETE: TdxDBGridCurrencyColumn;
    dbgConsultaOUTRASDESPESAS: TdxDBGridCurrencyColumn;
    dbgConsultaJUROS: TdxDBGridCurrencyColumn;
    dbgConsultaIMPOSTO: TdxDBGridCurrencyColumn;
    dbgConsultaTOTAL: TdxDBGridCurrencyColumn;
    dbgConsultaBASEIMPOSTO: TdxDBGridCurrencyColumn;
    dbgConsultaSTATUSDESC: TdxDBGridMaskColumn;
    dbgConsultaDESCRICAO: TdxDBGridMaskColumn;
    dbgConsultaSTATUS: TdxDBGridMaskColumn;
    dbgConsultaSAIDAITEM: TdxDBGridMaskColumn;
    dbgConsultaITEM: TdxDBGridMaskColumn;
    dbgConsultaQUANTIDADE: TdxDBGridCurrencyColumn;
    dbgConsultaQTDFATURADA: TdxDBGridCurrencyColumn;
    dbgConsultaINVOICE: TdxDBGridMaskColumn;
    dbgConsultaSAIDAINVOICE: TdxDBGridMaskColumn;
    dbgConsultaDESCITEM: TdxDBGridMaskColumn;
    cbFaturadas: TTS_CheckBox;
    C_ConsultaPRECO: TFloatField;
    dbgConsultaPRECO: TdxDBGridMaskColumn;
    N2: TMenuItem;
    AbrirRelatriodeFaturamentodeSO1: TMenuItem;
    AbrirSalesOrder1: TMenuItem;
    AbrirCadastrodeClientes1: TMenuItem;
    TS_PopupEdit1: TTS_PopupEdit;
    clbStatus: TTS_CheckListBox;
    dbgConsultaSUBTOTALITEM: TdxDBGridMaskColumn;
    C_TipoMovimentoDS: TDataSource;
    C_TiposMovimentos: TClientDataSet;
    C_TiposMovimentosTIPOMOVIMENTO: TIntegerField;
    C_TiposMovimentosDESCRICAO: TStringField;
    P_TiposMovimentos: TDataSetProvider;
    Q_TiposMovimentos: TIBQuery;
    Q_TiposMovimentosTIPOMOVIMENTO: TIntegerField;
    Q_TiposMovimentosDESCRICAO: TIBStringField;
    TS_Label4: TTS_Label;
    cbCanceladas: TTS_CheckBox;
    clbTipoOperacao: TTS_CheckListBox;
    TS_PopupEdit2: TTS_PopupEdit;
    C_ConsultaFABRICANTE: TStringField;
    dbgConsultaFABRICANTE: TdxDBGridMaskColumn;
    C_ConsultaZONA: TStringField;
    dbgConsultaZona: TdxDBGridColumn;
    FiltroItens: TTS_PopupFiltrarItens;
    C_ConsultaFUNCVENDA: TStringField;
    C_ConsultaCOMISSAOPECATABELA: TFloatField;
    C_ConsultaCOMISSAOPECAVENDA: TFloatField;
    dbgConsultaFUNCVENDA: TdxDBGridColumn;
    dbgConsultaCOMISSAOPECATABELA: TdxDBGridColumn;
    dbgConsultaCOMISSAOPECAVENDA: TdxDBGridColumn;
    C_ConsultaQUANTIDADEVOLUME: TFloatField;
    dbgConsultaQUANTIDADEVOLUME: TdxDBGridMaskColumn;
    C_ConsultaMESANO: TStringField;
    dbgConsultaMesANO: TdxDBGridDateColumn;
    procedure AtualizaConsulta;
    procedure btClientesClick(Sender: TObject);
    procedure btAtualizarClick(Sender: TObject);
    procedure dbgConsultaDblClick(Sender: TObject);
    procedure cbFaturadasChange(Sender: TObject);
    procedure FormsComponentBeforeClearParams(Sender: TObject);
    procedure AbrirCadastrodeClientes1Click(Sender: TObject);
    procedure AbrirSalesOrder1Click(Sender: TObject);
    procedure AbrirRelatriodeFaturamentodeSO1Click(Sender: TObject);
    procedure dbgConsultaGetSummaryTopText(Sender: TObject;
      ACanvas: TCanvas; ARect: TRect; ANode: TdxDBGridNode;
      GroupKeyValue: Variant; FieldName: String; var AText: String);
    procedure edDataIDateChange(Sender: TObject);
    procedure TS_PopupEdit1CloseUp(Sender: TObject; var Text: String;
      var Accept: Boolean);
    procedure cbCanceladasChange(Sender: TObject);
    procedure TS_PopupEdit2CloseUp(Sender: TObject; var Text: String;
      var Accept: Boolean);
  private
    { Private declarations }
   sSQLPadrao, sClientes, sNomesClientes : String;
  public
    { Public declarations }
  end;

var
  RptSalesOrdersItens: TRptSalesOrdersItens;

implementation

uses DM_Projeto, funcoes;

{$R *.DFM}

procedure TRptSalesOrdersItens.AtualizaConsulta;
var
   sTipoOperacao, sPrimeiroNome, sStatus,nTP_MV, sSituacao : String;
   i : integer;
begin
  nTP_MV := '';
  sTipoOperacao := clbTipoOperacao.Selecionados;
  if (sTipoOperacao <> '') then
    nTP_MV := 'and s.tipomovimento in ('+sTipoOperacao+')';

  sSituacao := ' and s.situacao = '+iif(cbCanceladas.CHecked,'''C''','''N''');
  with C_Consulta do begin
    Close;
    CommandText := 'Select ' + getCampos + ' ' +
                   'From ' + getTabelas + ' ' +
                   'where s.tipopadrao = 2 '+ sSituacao + nTP_MV +
                   'and  s.data between :idata and :fdata ';

    if sClientes <> '' then begin
      CommandText := CommandText + ' and s.favorecido in (' + sClientes +') ';
    end;
    if (Length(FiltroItens.getSQL) > 0) Then
      CommandText := CommandText + ' and '+FiltroItens.getSQL;
    if cbFaturadas.Checked then
      CommandText := CommandText + 'and si.status in (''F'',''L'') '
    else begin
      sStatus := clbStatus.Selecionados;
      if sStatus <> '' then
        CommandText := CommandText + ' and s.status in (' + sStatus + ') ';
    end;
    Params.ParamByName('iData').AsDateTime := Trunc(edDataI.Date);
    Params.ParamByName('fData').AsDateTime := Trunc(edDataF.Date);
    Open;
  end;
  with dbgConsulta do begin
    TS_ReportFilter.Clear;
    TS_ReportFilter.Add('Período de: ' + FormatDateTime(ShortDateFormat, edDataI.Date)
         + ' a ' + FormatDateTime(ShortDateFormat, edDataF.Date) );
    if sNomesClientes <> '' then begin
      sPrimeiroNome := PrimeiraPalavra(SeparaStrings(sNomesClientes,',',1));
      for i := 2 to ContaStrings(sNomesClientes,',') do begin
        sPrimeiroNome := sPrimeiroNome + ', ' + PrimeiraPalavra(SeparaStrings(sNomesClientes,',',i));
      end;
      TS_ReportFilter.Add('Clientes: ' + sPrimeiroNome);
    end;
    FullExpand;
    GotoFirst;
  end;
  FormsComponent.Caption := 'Pedido de Venda no Período de: '+DateTostr(edDataI.Date) +' a '+
                                                DateTostr(edDataF.Date);

end;


procedure TRptSalesOrdersItens.btClientesClick(Sender: TObject);
begin
  inherited;
  with DMProjeto do begin
    SetParametrosForm(['',sClientes, 1]);
    CriarForm('DlgEscolheFavorecidos', Self, true);
    if ExisteParametrosForm then begin
      sClientes := GetParametrosForm(0);
      sNomesClientes := GetParametrosForm(1);
      LimparParametrosForm;
      AtualizaConsulta;
    end;
  end;
end;

procedure TRptSalesOrdersItens.btAtualizarClick(Sender: TObject);
begin
  inherited;
  AtualizaConsulta;
end;

procedure TRptSalesOrdersItens.dbgConsultaDblClick(Sender: TObject);
var
   nId : Integer;

begin
  inherited;
  if dbgConsulta.TS_SelectedColumn = 'NOME' then begin
		with DMProjeto do begin
      nId := dbgConsulta.GetFieldValue(dbgConsulta.focusednode,'cliente',0);
  		SetParametrosForm([nId]);
    	CriarForm('FrmClientes',self,true);
  	end;
  end
  else begin
    if dbgConsulta.TS_SelectedColumn = 'NOMEVENDEDOR' then begin
      with DMProjeto do begin
        nId := dbgConsulta.GetFieldValue(dbgConsulta.focusednode,'vendedor',0);
        SetParametrosForm([nId]);
        CriarForm('FrmFuncionarios',self,true);
      end;
    end
    else begin
      if dbgConsulta.TS_SelectedColumn = 'INVOICE' then begin
        with DMProjeto do begin
          nId := dbgConsulta.GetFieldValue(dbgConsulta.FocusedNode,'SaidaInvoice',0);
          SetParametrosForm([nId]);
          CriarForm('FrmInvoices',Self,True);
        end;
      end
      else begin
        if dbgConsulta.TS_SelectedColumn = 'SUBTOTALITEM' then begin
          with DMProjeto do begin
            nId := dbgConsulta.GetFieldValue(dbgConsulta.FocusedNode,'Saida',0);
            SetParametrosForm([nId]);
            CriarForm('RptFaturaSalesOrders',Self,True);
          end;
        end
        else begin
          with DMProjeto do begin
            nId := dbgConsulta.GetFieldValue(dbgConsulta.focusednode,'Saida',0);
            SetParametrosForm([nId]);
            CriarForm('FrmSalesOrder',self,true);
          end;
        end;
      end;
    end;
  end;

  end;

procedure TRptSalesOrdersItens.cbFaturadasChange(Sender: TObject);
begin
  inherited;
  AtualizaConsulta;
end;

procedure TRptSalesOrdersItens.FormsComponentBeforeClearParams(
  Sender: TObject);
var nId: integer;
begin
  inherited;
  C_TiposMovimentos.close;
  C_TiposMovimentos.open;
  clbTipoOperacao.SetDataSet(C_TiposMovimentos);  
  if DMProjeto.QtdParametrosForm > 0 then begin
    nId := DMProjeto.GetParametrosForm(0);
    Q_Consulta.Sql.Add(' and s.saida = ' + InttoStr(nId));
  end;
  C_Status.open;
  clbStatus.SetDataSet(C_Status);
  sClientes := '';
  sSQLPadrao := Q_Consulta.SQL.Text;
  edDataI.OnDateChange := nil;
  edDataF.OnDateChange := nil;
  if edDataI.GetEditingText = '' then edDataI.Date := ( DMProjeto.dDataSistema );
  if edDataF.GetEditingText = '' then edDataF.Date := ( DMProjeto.dDataSistema );
  edDataI.OnDateChange := edDataIDateChange;
  edDataF.OnDateChange := edDataIDateChange;
  if C_Consulta.FindField('DATA') <> nil then
     C_Consulta.FindField('DATA').EditMask := ShortDateFormat;

end;

procedure TRptSalesOrdersItens.AbrirCadastrodeClientes1Click(
  Sender: TObject);
var nId: integer;
begin
  inherited;
  with DMProjeto do begin
     nId := dbgConsulta.GetFieldValue(dbgConsulta.focusednode,'cliente',0);
     SetParametrosForm([nId]);
     CriarForm('FrmClientes',self,true);
  end;
end;

procedure TRptSalesOrdersItens.AbrirSalesOrder1Click(Sender: TObject);
var nId:integer;
begin
  inherited;
  with DMProjeto do begin
    nId := dbgConsulta.GetFieldValue(dbgConsulta.focusednode,'Saida',0);
    SetParametrosForm([nId]);
    CriarForm('FrmSalesOrder',self,true);
  end;
end;

procedure TRptSalesOrdersItens.AbrirRelatriodeFaturamentodeSO1Click(
  Sender: TObject);
var nId: integer;
begin
  inherited;
  with DMProjeto do begin
    nId := dbgConsulta.GetFieldValue(dbgConsulta.FocusedNode,'Saida',0);
    SetParametrosForm([nId]);
    CriarForm('RptFaturaSalesOrders',Self,True);
  end;
end;

procedure TRptSalesOrdersItens.dbgConsultaGetSummaryTopText(
  Sender: TObject; ACanvas: TCanvas; ARect: TRect; ANode: TdxDBGridNode;
  GroupKeyValue: Variant; FieldName: String; var AText: String);
begin
  inherited;
//  if aNode.Level = 0 then begin
//    if (FieldName = 'DESCITEM') then
//      AText := ' - ' + DateToStr(dbgConsulta.GetFirstChildValue(ANode,'DATA')) + ' - ' + dbgConsulta.GetFirstChildValue(ANode,'NOME');
//  end;
end;

procedure TRptSalesOrdersItens.edDataIDateChange(Sender: TObject);
begin
  inherited;
//	 AtualizaConsulta;
end;

procedure TRptSalesOrdersItens.TS_PopupEdit1CloseUp(Sender: TObject;
  var Text: String; var Accept: Boolean);
begin
  inherited;
  Text := clbStatus.Selecionados(true);
  Accept := true;
end;

procedure TRptSalesOrdersItens.cbCanceladasChange(Sender: TObject);
begin
  inherited;
  AtualizaConsulta;
end;

procedure TRptSalesOrdersItens.TS_PopupEdit2CloseUp(Sender: TObject;
  var Text: String; var Accept: Boolean);
begin
  inherited;
  Text := clbTipoOperacao.Selecionados( true );
  Accept := true;
end;

end.
